chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(is.character(strands))
stopifnot(is.logical(extend3prime))
check_exist_and_get_version(chopoff_path)
args <- c("--name" = name, "--genome" = genome, "--output" = out_dir,
"--distance" =  distance, "--motif" = motif,
"--ambig_max" = ambig_max)
logicals <- (c("+", "-", "FALSE") %in% c(strands, extend3prime))
logicals <- c("--not_forward", "--not_reverse", "--extend3")[!logicals]
algorithm <- c(algorithm, "--hash_length" = hash_length)
algorithm <- paste(names(algorithm), algorithm)
args <- paste("build", paste(names(args), shQuote(args)), logicals, algorithm)
system2(normalizePath(chopoff_path), args, wait = TRUE)
}
build_index(name, genome, out_dir, chopoff_path = chopoff_path)
build_index <- function(name, genome, out_dir, algorithm = "prefixHashDB",
distance = 3, motif = "Cas9", hash_length = 16,
ambig_max = 1, strands = c("+", "-"),
extend3prime = FALSE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(is.character(strands))
stopifnot(is.logical(extend3prime))
check_exist_and_get_version(chopoff_path)
args <- c("--name" = name, "--genome" = genome, "--output" = out_dir,
"--distance" =  distance, "--motif" = motif,
"--ambig_max" = ambig_max)
logicals <- (c("+", "-", "FALSE") %in% c(strands, extend3prime))
logicals <- c("--not_forward", "--not_reverse", "--extend3")[!logicals]
algorithm <- c(algorithm, "--hash_length" = hash_length)
algorithm <- paste(names(algorithm), algorithm)
args <- paste("build", paste(names(args), shQuote(args)), logicals, algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")))
}
build_index(name, genome, out_dir, chopoff_path = chopoff_path)
build_index <- function(name, genome, out_dir, algorithm = "prefixHashDB",
distance = 3, motif = "Cas9", hash_length = 16,
ambig_max = 1, strands = c("+", "-"),
extend3prime = FALSE,
validate = TRUE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(is.character(strands))
stopifnot(is.logical(extend3prime))
if (validate) check_exist_and_get_version(chopoff_path)
args <- c("--name" = name, "--genome" = genome, "--output" = out_dir,
"--distance" =  distance, "--motif" = motif,
"--ambig_max" = ambig_max)
logicals <- (c("+", "-", "FALSE") %in% c(strands, extend3prime))
logicals <- c("--not_forward", "--not_reverse", "--extend3")[!logicals]
algorithm <- c(algorithm, "--hash_length" = hash_length)
algorithm <- paste(names(algorithm), algorithm)
args <- paste("build", paste(names(args), shQuote(args)), logicals, algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")))
}
build_index(name, genome, out_dir, validate = FALSE, chopoff_path = chopoff_path)
build_index <- function(name, genome, out_dir, algorithm = "prefixHashDB",
distance = 3, motif = "Cas9", hash_length = 16,
ambig_max = 1, strands = c("+", "-"),
extend3prime = FALSE,
validate = TRUE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(is.character(strands))
stopifnot(is.logical(extend3prime))
if (validate) check_exist_and_get_version(chopoff_path)
args <- c("--name" = name, "--genome" = genome, "--output" = out_dir,
"--distance" =  distance, "--motif" = motif,
"--ambig_max" = ambig_max)
logicals <- (c("+", "-", "FALSE") %in% c(strands, extend3prime))
logicals <- c("--not_forward", "--not_reverse", "--extend3")[!logicals]
algorithm <- c(algorithm, "--hash_length" = hash_length)
algorithm <- paste(names(algorithm), algorithm)
args <- paste("build", paste(names(args), shQuote(args)), logicals, algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")))
}
debug(build_index)
build_index(name, genome, out_dir, validate = FALSE, chopoff_path = chopoff_path)
args
algorithm
logicals
args
args <- c("--name" = name, "--genome" = genome, "--output" = out_dir,
"--distance" =  distance, "--motif" = motif,
"--ambig_max" = ambig_max)
paste("build", paste(names(args), shQuote(args)), logicals, algorithm)
build_index <- function(name, genome, out_dir, algorithm = "prefixHashDB",
distance = 3, motif = "Cas9", hash_length = 16,
ambig_max = 1, strands = c("+", "-"),
extend3prime = FALSE,
validate = TRUE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(is.character(strands))
stopifnot(is.logical(extend3prime))
if (validate) check_exist_and_get_version(chopoff_path)
args <- c("--name" = name, "--genome" = genome, "--output" = out_dir,
"--distance" =  distance, "--motif" = motif,
"--ambig_max" = ambig_max)
logicals <- (c("+", "-", "FALSE") %in% c(strands, extend3prime))
logicals <- c("--not_forward", "--not_reverse", "--extend3")[!logicals]
algorithm <- c(algorithm, "--hash_length" = hash_length)
algorithm <- paste(names(algorithm), algorithm)
args <- c("build", paste(names(args), shQuote(args)), logicals, algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")))
}
debug(build_index)
build_index <- function(name, genome, out_dir, algorithm = "prefixHashDB",
distance = 3, motif = "Cas9", hash_length = 16,
ambig_max = 1, strands = c("+", "-"),
extend3prime = FALSE,
validate = TRUE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(is.character(strands))
stopifnot(is.logical(extend3prime))
if (validate) check_exist_and_get_version(chopoff_path)
args <- c("--name" = name, "--genome" = genome, "--output" = out_dir,
"--distance" =  distance, "--motif" = motif,
"--ambig_max" = ambig_max)
logicals <- (c("+", "-", "FALSE") %in% c(strands, extend3prime))
logicals <- c("--not_forward", "--not_reverse", "--extend3")[!logicals]
algorithm <- c(algorithm, "--hash_length" = hash_length)
algorithm <- paste(names(algorithm), algorithm)
args <- c("build", paste(names(args), shQuote(args)), logicals, algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")))
}
build_index <- function(name, genome, out_dir, algorithm = "prefixHashDB",
distance = 3, motif = "Cas9", hash_length = 16,
ambig_max = 1, strands = c("+", "-"),
extend3prime = FALSE,
validate = TRUE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(is.character(strands))
stopifnot(is.logical(extend3prime))
if (validate) check_exist_and_get_version(chopoff_path)
args <- c("--name" = name, "--genome" = genome, "--output" = out_dir,
"--distance" =  distance, "--motif" = motif,
"--ambig_max" = ambig_max)
logicals <- (c("+", "-", "FALSE") %in% c(strands, extend3prime))
logicals <- c("--not_forward", "--not_reverse", "--extend3")[!logicals]
algorithm <- c(algorithm, "--hash_length" = hash_length)
algorithm <- paste(names(algorithm), algorithm)
args <- c("build", paste(names(args), shQuote(args)), logicals, algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")), wait = TRUE)
}
debug(build_index)
build_index(name, genome, out_dir, validate = FALSE, chopoff_path = chopoff_path)
args
paste(normalizePath(chopoff_path), paste(args, collapse = " "))
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")), wait = TRUE)
R.utils::gunzip(genome)
file.exists(genome)
genome <- "/tmp/RtmpYqYL8v/ecoli_genome/Escherichia_coli_b088_gca_000163155.ASM16315v1.dna.toplevel.fa"
file.exists(genome)
build_index(name, genome, out_dir, validate = FALSE, chopoff_path = chopoff_path)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")), wait = TRUE)
?indexFa
?Biostrings::fasta.index
!file.exists(paste0(genome, ".fai"))
if (!file.exists(paste0(genome, ".fai"))) {
Rsamtools::indexFa(genome)
}
build_index(name, genome, out_dir, validate = FALSE, chopoff_path = chopoff_path)
Biostrings::readDNAStringSet("/home/roler/Desktop/forks/CHOPOFF.jl/test/sample_data/genome/semirandom.2bit")
Biostrings::readDNAStringSet("/home/roler/Desktop/forks/CHOPOFF.jl/test/sample_data/genome/semirandom.fa")
Biostrings::readDNAStringSet(genome)
nchar(Biostrings::readDNAStringSet(genome))
width(Biostrings::readDNAStringSet(genome))
widths(Biostrings::readDNAStringSet(genome))
library(BiocStyle)
library(Biostrings)
widths(Biostrings::readDNAStringSet(genome))
width(Biostrings::readDNAStringSet(genome))
sum(width(Biostrings::readDNAStringSet(genome)))
sum(width(Biostrings::readDNAStringSet("/home/roler/Desktop/forks/CHOPOFF.jl/test/sample_data/genome/semirandom.fa")))
sum(width(Biostrings::readDNAStringSet(genome))) - sum(width(Biostrings::readDNAStringSet("/home/roler/Desktop/forks/CHOPOFF.jl/test/sample_data/genome/semirandom.fa")))
sum(width(Biostrings::readDNAStringSet(genome))) / sum(width(Biostrings::readDNAStringSet("/home/roler/Desktop/forks/CHOPOFF.jl/test/sample_data/genome/semirandom.fa")))
build_index <- function(name, genome, out_dir, algorithm = "prefixHashDB",
distance = 3, motif = "Cas9", hash_length = 16,
ambig_max = 1, strands = c("+", "-"),
extend3prime = FALSE,
validate = TRUE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(is.character(strands))
stopifnot(is.logical(extend3prime))
if (validate) check_exist_and_get_version(chopoff_path)
args <- c("--name" = name, "--genome" = genome, "--output" = out_dir,
"--distance" =  distance, "--motif" = motif,
"--ambig_max" = ambig_max, "--hash_length" = hash_length)
logicals <- (c("+", "-", "FALSE") %in% c(strands, extend3prime))
logicals <- c("--not_forward", "--not_reverse", "--extend3")[!logicals]
args <- c("build", paste(names(args), shQuote(args)), logicals, algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")), wait = TRUE)
}
build_index(name, genome, out_dir, validate = FALSE, chopoff_path = chopoff_path)
genome <- "/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/semirandom.fa"
name <- "CAS9"
genome <- ""/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/semirandom.fa""
genome <- "/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/semirandom.fa"
## Note: a fasta index ".fai" file must exist in directory of genome.
# You can make it with:
#if (!file.exists(paste0(genome, ".fai"))) {
#Rsamtools::indexFa(genome)
#}
out_dir <- file.path(tempdir(), "CHOPOFF_sample_genome")
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF"
#' genome <- "/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/semirandom.fa"
#' ## Note: a fasta index ".fai" file must exist in directory of genome.
#' # You can make it with:
#' #if (!file.exists(paste0(genome, ".fai"))) {
#' #Rsamtools::indexFa(genome)
#' #}
#' out_dir <- file.path(tempdir(), "CHOPOFF_sample_genome")
#' chopoff_path = "CHOPOFF" # Or direct path to CHOPOFF binary
#' build_index(name, genome, out_dir, validate = FALSE)
#'
build_index <- function(name, genome, out_dir, algorithm = "prefixHashDB",
distance = 3, motif = "Cas9", hash_length = 16,
ambig_max = 0, strands = c("+", "-"),
fwd_motif = "NNNNNNNNNNNNNNNNNNNNXXX",
fwd_pam = "XXXXXXXXXXXXXXXXXXXXNGG",
extend3prime = FALSE,
validate = TRUE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(is.character(strands))
stopifnot(is.logical(extend3prime))
if (validate) check_exist_and_get_version(chopoff_path)
args <- c("--name" = name, "--genome" = genome, "--output" = out_dir,
"--distance" =  distance, "--motif" = motif,
"--ambig_max" = ambig_max,
"--fwd_motif" = fwd_motif, "--fwd_pam" = fwd_pam)
logicals <- (c("+", "-", "FALSE") %in% c(strands, extend3prime))
logicals <- c("--not_forward", "--not_reverse", "--extend3")[!logicals]
algorithm <- c(algorithm, "--hash_length" = hash_length)
algorithm <- paste(names(algorithm), algorithm)
args <- c("build", paste(names(args), shQuote(args)), logicals, algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")), wait = TRUE)
}
build_index(name, genome, out_dir, validate = FALSE)
out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome")
search_index(guides, out_dir_index)
#' #if (!file.exists(paste0(genome, ".fai"))) {
#' #Rsamtools::indexFa(genome)
#' #}
#' out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome")
#' chopoff_path = "CHOPOFF" # Or direct path to CHOPOFF binary
#' build_index(name, genome, out_dir_index, validate = FALSE)
#'
#' # Now search some guides
#' guides <- "/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/guides.txt"
#' search_index(guides, out_dir_index)
search_index <- function(guides, index_dir, out_dir = index_dir, algorithm = "prefixHashDB",
distance = 3, validate = TRUE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(dir.exists(index_dir))
if (length(guides) != 1 && is.character(guides) && file.exists(guides)) {
stop("'guides' must be character path to single existing file!")
}
if (validate) check_exist_and_get_version(chopoff_path)
args <- c("--guides" = guides, "--output" = out_dir,
"--distance" =  distance)
args <- c("search", paste(names(args), shQuote(args)), algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")), wait = TRUE)
}
search_index(guides, out_dir_index)
guides <- "/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/guides.txt"
guides
search_index(guides, out_dir_index)
search_index(guides, out_dir_index, validate = FALSE)
#' #if (!file.exists(paste0(genome, ".fai"))) {
#' #Rsamtools::indexFa(genome)
#' #}
#' out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome")
#' chopoff_path = "CHOPOFF" # Or direct path to CHOPOFF binary
#' build_index(name, genome, out_dir_index, validate = FALSE)
#'
#' # Now search some guides
#' guides <- "/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/guides.txt"
#' search_index(guides, out_dir_index, validate = FALSE)
search_index <- function(guides, index_dir, out_dir = index_dir, algorithm = "prefixHashDB",
distance = 3, validate = TRUE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(dir.exists(index_dir))
if (length(guides) != 1 && is.character(guides) && file.exists(guides)) {
stop("'guides' must be character path to single existing file!")
}
if (validate) check_exist_and_get_version(chopoff_path)
args <- c("--guides" = guides, "--database" = index_dir, "--output" = out_dir,
"--distance" =  distance)
args <- c("search", paste(names(args), shQuote(args)), algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")), wait = TRUE)
}
search_index(guides, out_dir_index, validate = FALSE)
#' #if (!file.exists(paste0(genome, ".fai"))) {
#' #Rsamtools::indexFa(genome)
#' #}
#' out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome")
#' chopoff_path = "CHOPOFF" # Or direct path to CHOPOFF binary
#' build_index(name, genome, out_dir_index, validate = FALSE)
#'
#' # Now search some guides
#' guides <- "/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/guides.txt"
#' search_index(guides, out_dir_index, validate = FALSE)
search_index <- function(guides, index_dir, out_file = file.path(index_dir, paste(algorithm, distance, ".csv")),
algorithm = "prefixHashDB",
distance = 3, validate = TRUE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(dir.exists(index_dir))
if (length(guides) != 1 && is.character(guides) && file.exists(guides)) {
stop("'guides' must be character path to single existing file!")
}
if (validate) check_exist_and_get_version(chopoff_path)
args <- c("--guides" = guides, "--database" = index_dir, "--output" = out_dir,
"--distance" =  distance)
args <- c("search", paste(names(args), shQuote(args)), algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")), wait = TRUE)
}
search_index(guides, out_dir_index, validate = FALSE)
out_dir_index
search_index(guides, "/tmp/RtmpYqYL8v/CHOPOFF_sample_genome/", validate = FALSE)
search_index(guides, "/tmp/RtmpYqYL8v/CHOPOFF_sample_genome/prefixHashDB.bin", validate = FALSE)
debug(search_index)
search_index(guides, out_dir_index, validate = FALSE)
/prefixHashDB.bin
paste(normalizePath(chopoff_path), paste(args, collapse = " "))
system("/home/roler/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF search --guides '/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/guides.txt' --database '/tmp/RtmpYqYL8v/CHOPOFF_sample_genome/prefixHashDB.bin' --output '/tmp/RtmpYqYL8v/CHOPOFF_sample_genome' --distance '3' prefixHashDB", wait = T)
system("/home/roler/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF search --guides '/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/guides.txt' --database '/tmp/RtmpYqYL8v/CHOPOFF_sample_genome/prefixHashDB.bin' --output '/tmp/RtmpYqYL8v/CHOPOFF_sample_genome' --distance '2' prefixHashDB", wait = T)
system("/home/roler/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF search --guides '/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/guides.txt' --database '/tmp/RtmpYqYL8v/CHOPOFF_sample_genome/' --output '/tmp/RtmpYqYL8v/CHOPOFF_sample_genome' --distance '2' prefixHashDB", wait = T)
out_file
#' #if (!file.exists(paste0(genome, ".fai"))) {
#' #Rsamtools::indexFa(genome)
#' #}
#' out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome")
#' chopoff_path = "CHOPOFF" # Or direct path to CHOPOFF binary
#' build_index(name, genome, out_dir_index, validate = FALSE)
#'
#' # Now search some guides
#' guides <- "/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/guides.txt"
#' search_index(guides, out_dir_index, validate = FALSE)
search_index <- function(guides, index_dir, out_file = file.path(index_dir, paste(algorithm, distance, ".csv", sep = "_")),
algorithm = "prefixHashDB",
distance = 3, validate = TRUE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(dir.exists(index_dir))
if (length(guides) != 1 && is.character(guides) && file.exists(guides)) {
stop("'guides' must be character path to single existing file!")
}
if (validate) check_exist_and_get_version(chopoff_path)
args <- c("--guides" = guides, "--database" = index_dir, "--output" = out_dir,
"--distance" =  distance)
args <- c("search", paste(names(args), shQuote(args)), algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")), wait = TRUE)
}
debug(search_index)
search_index(guides, out_dir_index, validate = FALSE)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")), wait = TRUE)
paste(normalizePath(chopoff_path), paste(args, collapse = " "))
system("/home/roler/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF search --database '/tmp/RtmpYqYL8v/CHOPOFF_sample_genome' --guides '/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/guides.txt'  --output '/tmp/RtmpYqYL8v/CHOPOFF_sample_genome' --distance '3' prefixHashDB", wait = T)
#' #if (!file.exists(paste0(genome, ".fai"))) {
#' #Rsamtools::indexFa(genome)
#' #}
#' out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome")
#' chopoff_path = "CHOPOFF" # Or direct path to CHOPOFF binary
#' build_index(name, genome, out_dir_index, validate = FALSE)
#'
#' # Now search some guides
#' guides <- "/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/guides.txt"
#' search_index(guides, out_dir_index, validate = FALSE)
search_index <- function(guides, index_dir, out_file = file.path(index_dir, paste(algorithm, distance, ".csv", sep = "_")),
algorithm = "prefixHashDB",
distance = 3, validate = TRUE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(dir.exists(index_dir))
if (length(guides) != 1 && is.character(guides) && file.exists(guides)) {
stop("'guides' must be character path to single existing file!")
}
if (validate) check_exist_and_get_version(chopoff_path)
args <- c("--guides" = guides, "--database" = index_dir, "--output" = out_file,
"--distance" =  distance)
args <- c("search", paste(names(args), shQuote(args)), algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")), wait = TRUE)
}
search_index(guides, out_dir_index, validate = FALSE)
index_dir
out_dir_index
list.files(out_dir_index)
#' #if (!file.exists(paste0(genome, ".fai"))) {
#' #Rsamtools::indexFa(genome)
#' #}
#' out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome")
#' chopoff_path = "CHOPOFF" # Or direct path to CHOPOFF binary
#' build_index(name, genome, out_dir_index, validate = FALSE)
#'
#' # Now search some guides
#' guides <- "/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/guides.txt"
#' search_index(guides, out_dir_index, validate = FALSE)
search_index <- function(guides, index_dir, out_file = file.path(index_dir, paste0(algorithm, "_", distance, ".csv")),
algorithm = "prefixHashDB",
distance = 3, validate = TRUE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(dir.exists(index_dir))
if (length(guides) != 1 && is.character(guides) && file.exists(guides)) {
stop("'guides' must be character path to single existing file!")
}
if (validate) check_exist_and_get_version(chopoff_path)
args <- c("--guides" = guides, "--database" = index_dir, "--output" = out_file,
"--distance" =  distance)
args <- c("search", paste(names(args), shQuote(args)), algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")), wait = TRUE)
}
search_index(guides, out_dir_index, validate = FALSE)
list.files(out_dir_index)
list.files(out_dir_index, pattern = "3\\.csv$")
list.files(out_dir_index, pattern = "3\\.csv$", full.names = TRUE)
#' #Rsamtools::indexFa(genome)
#' #}
#' out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome")
#' chopoff_path = "CHOPOFF" # Or direct path to CHOPOFF binary
#' build_index(name, genome, out_dir_index, validate = FALSE)
#'
#' # Now search some guides
#' guides <- "/home/roler/Desktop/forks/crisprCHOPOFF/inst/extdata/sample_genome/guides.txt"
#' guide_hits <- search_index(guides, out_dir_index, validate = FALSE)
#'
search_index <- function(guides, index_dir, out_file = file.path(index_dir, paste0(algorithm, "_", distance, ".csv")),
algorithm = "prefixHashDB",
distance = 3, validate = TRUE,
chopoff_path = "~/Desktop/forks/CHOPOFF.jl/build/bin/CHOPOFF") {
stopifnot(dir.exists(index_dir))
if (length(guides) != 1 && is.character(guides) && file.exists(guides)) {
stop("'guides' must be character path to single existing file!")
}
if (validate) check_exist_and_get_version(chopoff_path)
args <- c("--guides" = guides, "--database" = index_dir, "--output" = out_file,
"--distance" =  distance)
args <- c("search", paste(names(args), shQuote(args)), algorithm)
system(paste(normalizePath(chopoff_path), paste(args, collapse = " ")), wait = TRUE)
return(out_file)
}
guide_hits <- search_index(guides, out_dir_index, validate = FALSE)
read.table(guide_hits)
read.table(guide_hits, sep = ",")
read.table(guide_hits, sep = ",", header = TRUE)
guide_hits_table <- read.table(guide_hits, sep = ",", header = TRUE)
guide_hits_table[distance == 0,]
guide_hits_table[guide_hits_table$distance == 0,]
dist0 <- guide_hits_table[guide_hits_table$distance == 0,]
dist0
dist0[dist0$guide == "AAACCGAGGAGATTCATTTA",]$chromosome
unique(dist0[dist0$guide == "TCCGGCCTGGTTATCGAAGG",]$chromosome)
unique(dist0[dist0$guide == "TCCGGCCTGGTTATCGAAGG",]$chromosome) # 2 chromosomes
system("CHOPOFF --version")
system("CHOPOFF --version")
system(". .bashrc")
system(". ~/.bashrc")
system("CHOPOFF --version")
library(crisprCHOPOFF)
system.file("extdata/sample_genome")
1+1
system.file("extdata/sample_genome", "semirandom.fa"", package = "crisprCHOPOFF"")
system.file("extdata/sample_genome", "semirandom.fa", package = "crisprCHOPOFF")
genome <- system.file("extdata/sample_genome", "semirandom.fa", package = "crisprCHOPOFF")
genome <- system.file("extdata/sample_genome", "guides.txt", package = "crisprCHOPOFF")
genome
library(crisprCHOPOFF)
library(crisprCHOPOFF)
library(crisprCHOPOFF)
name <- "CAS9"
genome <- system.file("extdata/sample_genome", "semirandom.fa", package = "crisprCHOPOFF")
genome
out_dir <- file.path(tempdir(), "CHOPOFF_sample_genome")
outdir
out_dir
build_index(name, genome, out_dir, validate = FALSE)
library(crisprCHOPOFF)
build_index(name, genome, out_dir, validate = FALSE)
library(crisprCHOPOFF)
library(crisprCHOPOFF)
build_index(name, genome, out_dir, validate = FALSE)
system("CHOPOFF --version")
system("CHOPOFF --version")
system(". ~/.bashrc && CHOPOFF --version")
system(". ~/.bashrc")
system("CHOPOFF --version")
system("which CHOPOFF")
system("which CHOPOFF")
system("which CHOPOFF")
system("bash -c 'source ~/.bashrc; which CHOPOFF")
system("bash -c 'source ~/.bashrc; which CHOPOFF", "'")
system(paste0("bash -c 'source ~/.bashrc; which CHOPOFF", "'"))
paste0("bash -c 'source ~/.bashrc; which CHOPOFF", "'")
paste0("bash -c 'source ~/.bashrc; echo $(which CHOPOFF)", "'")
system(paste0("bash -c 'source ~/.bashrc; echo $(which CHOPOFF)", "'"))
system(paste0("bash -c 'source ~/.bashrc'; echo $(which CHOPOFF)"))
system("bash -c 'source ~/.bashrc'; echo $(which CHOPOFF)")
system("bash -c 'source ~/.bashrc'; echo $(which CHOPOFF)", intern = T)
system("bash -c 'source ~/.bashrc'; echo $(which CHOPOFF)", intern = T)
system("bash -c 'source ~/.bashrc'; echo 1", intern = T)
system("bash -c 'source ~/.bashrc'; echo $(which CHOPOFF)", intern = T)
system("bash -c 'source ~/.bashrc'; echo $(which CHOPOFF)", intern = T)
?system2
?ssytem
?system
system2("CHOPOFF", "--version")
system("bash -c 'source ~/.bashrc; echo $(which CHOPOFF)'", intern = T)
system("bash -c 'source ~/.bashrc; echo $(which CHOPOFF)'", intern = T)
system("bash -c 'source ~/.bashrc; which CHOPOFF'", intern = T)
system("bash -c 'source ~/.bashrc; which CHOPOFF'", intern = T)
system("bash -c 'source ~/.bashrc; which CHOPOFF'", intern = T)
bash -c 'source ~/.bashrc; which CHOPOFF'
bash -c 'source ~/.bashrc; which CHOPOFF'
system("bash -c 'source ~/.bashrc; which CHOPOFF'", intern = T)
system("bash -c 'source ~/.bashrc; which CHOPOFF'", intern = T)
system("bash -c 'source ~/.bashrc; which CHOPOFF'", intern = T)
system("bash -c 'source /home/roler/.bashrc; which CHOPOFF'", intern = T)
system("bash -c 'source /home/roler/.bashrc; echo $(which CHOPOFF)'", intern = T)
