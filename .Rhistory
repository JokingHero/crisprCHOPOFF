guideSetFilter$score_crisprater
# Final filter:
guideSetFilter <- guideSetBowTie[guideSetBowTie$percentGC>=20]
guideSetFilter <- guideSetFilter[guideSetFilter$percentGC<=80]
guideSetFilter <- guideSetFilter[!guideSetFilter$polyT]
selected_bowtie <- guideSetFilter[guideSetFilter$score_crisprater > 0.8]
selected_bowtie # Our final candidate
# The offtarget detection using CHOPOFF
{
name <- "human_chr12_CHOPOFF_CAS9"
out_dir_index <- file.path(tempdir(), name)
if (!file.exists(paste0(fasta, ".fai"))) Rsamtools::indexFa(fasta)
build_index(name, fasta, out_dir_index, distance = 2, validate = FALSE)
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index, distance = 2)
# Off target score (This do not really make sense, because CHOPOFF supports bulges)
# guideSetCHOPOFF <- addOffTargetScores(guideSetCHOPOFF)
# guideSetCHOPOFF
# table(guideSetCHOPOFF$score_cfd)
# On target score (This is valid)
guideSetCHOPOFF <- addOnTargetScores(guideSetCHOPOFF, methods="crisprater")
head(guideSetCHOPOFF)
table(guideSetCHOPOFF$score_crisprater)
# Final filter:
guideSetCHOPOFFFilter <- guideSetCHOPOFF[guideSetCHOPOFF$percentGC>=20]
guideSetCHOPOFFFilter <- guideSetCHOPOFFFilter[guideSetCHOPOFFFilter$percentGC<=80]
guideSetCHOPOFFFilter <- guideSetCHOPOFFFilter[!guideSetCHOPOFFFilter$polyT]
selected_CHOPOFF <-  guideSetCHOPOFFFilter[guideSetCHOPOFFFilter$score_crisprater > 0.8]
selected_CHOPOFF # Our final candidate
}
# Now lets compare
identical(ranges(selected_CHOPOFF), ranges(selected_bowtie)) # We pick same site
identical(as.character(guideSetBowTie$protospacer), as.character(guideSetCHOPOFF$protospacer))
identical(ranges(guideSetBowTie), ranges(guideSetCHOPOFF))
identical(guideSetBowTie$n0, guideSetCHOPOFF$n0)
table(mcols(guideSetBowTie)[,c("n0")])
table(mcols(guideSetCHOPOFF)[,c("n0")])
table(mcols(guideSetBowTie)[,c("n2")])
table(mcols(guideSetCHOPOFF)[,c("n2")]) # <- 1 (1 distance hit), 2 (2 distance hits)
library(crisprCHOPOFF)
# Summarize overlaps
summarize_overlaps(guide_hits, distance = 2)
library(crisprCHOPOFF)
name <- "CAS9"
genome <- system.file("extdata/sample_genome", "semirandom.fa", package = "crisprCHOPOFF")
## Note: a fasta index ".fai" file must exist in directory of genome.
# You can make it with:
#if (!file.exists(paste0(genome, ".fai"))) {
#Rsamtools::indexFa(genome)
#}
out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome")
build_index(name, genome, out_dir_index, distance = 2)
#'
# Now search some guides
guides <- system.file("extdata/sample_genome", "guides.txt", package = "crisprCHOPOFF")
# Quick preview in guides:
guide_candidates <- read.table(guides, col.names = "guides")
unique(nchar(unlist(guide_candidates))) # Unique lengths of guides
guide_hits <- search_index(guides, out_dir_index, distance = 2, validate = FALSE)
guide_hits_table <- read.table(guide_hits, sep = ",", header = TRUE)
# use data.table::fread for reading in large list
# Subset to 0 distance hits
dist0 <- guide_hits_table[guide_hits_table$distance == 0,]
head(dist0)
# Which chromosomes is a specific guide found on with 0 distance hits?
unique(dist0[dist0$guide == "TCCGGCCTGGTTATCGAAGG",]$chromosome) # 2 chromosomes
# Summarize overlaps
summarize_path <- summarize_overlaps(guide_hits, distance = 2)
# Summarize overlaps
summarize_path <- summarize_overlaps(guide_hits, distance = 2, validate = FALSE)
summarize_table <- read.table(summarize_path, sep = ",", header = TRUE)
# Filter overlaps
filter_path <- filter_overlaps(guide_hits, distance = 2, validate = FALSE)
filter_table <- read.table(filter_path, sep = ",", header = TRUE)
summarize_table
sum(summarize_table$D2 > 0)
filter_table
filter_table$distance
name <- "CAS12a"
name <- "CAS12a"
build_index(name, genome, out_dir_index_cas12, validate = FALSE, distance = 2, preset = "Cas12a")
library(crisprCHOPOFF)
genome <- system.file("extdata/sample_genome", "semirandom.fa", package = "crisprCHOPOFF")
guides <- system.file("extdata/sample_genome", "guides.txt", package = "crisprCHOPOFF")
out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome")
out_dir_index_cas12 <- paste0(out_dir_index, "cas12")
build_index(name, genome, out_dir_index_cas12, validate = FALSE, distance = 2, preset = "Cas12a")
guides_cas12 <- system.file("extdata/sample_genome", "guides_cas12a.txt", package = "crisprCHOPOFF")
guides_cas12
# Quick preview in guides:
guide_candidates <- read.table(guides_cas12, col.names = "guides")
guide_candidates
unique(nchar(unlist(guide_candidates))) # Unique lengths of guides
guide_hits <- search_index(guides, out_dir_index_cas12, validate = FALSE, distance = 1)
out_dir_index_cas12
guide_hits <- search_index(guides, out_dir_index_cas12, validate = FALSE, distance = 1)
guide_hits <- search_index(guides_cas12, out_dir_index_cas12, validate = FALSE, distance = 1)
if (file.exists(guide_hits_table)) {
guide_hits_table <- read.table(guide_hits, sep = ",", header = TRUE)
expect_equal(sum(guide_hits_table$start), 9206453)
}
if (file.exists(guide_hits)) {
guide_hits_table <- read.table(guide_hits, sep = ",", header = TRUE)
expect_equal(sum(guide_hits_table$start), 9206453)
}
sum(guide_hits_table$start)
if (file.exists(guide_hits)) {
guide_hits_table <- read.table(guide_hits, sep = ",", header = TRUE)
expect_equal(sum(guide_hits_table$start), 83314)
}
list.files(file.path(tempdir(), "CHOPOFF_sample_genome"))
list.files(file.path(tempdir(), "CHOPOFF_sample_genome"), include.dirs = T)
name <- "CAS12a"
out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome", name)
name <- "CAS12a"
build_index(name, genome, out_dir_index_cas12, validate = FALSE, distance = 1, preset = "Cas12")
build_index(name, genome, out_dir_index_cas12, validate = FALSE, distance = 1, preset = "Cas12a")
build_index(name, genome, out_dir_index_cas12, validate = FALSE, distance = 1, preset = "Cas12a")
build_index(name, genome, out_dir_index_cas12, validate = FALSE, distance = 2, preset = "Cas12a")
name <- "CAS12a"
out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome", name)
build_index(name, genome, out_dir_index, distance = 2, preset = "cas12a")
build_index(name, genome, out_dir_index, distance = 2, preset = "cas12a")
build_index(name, genome, out_dir_index, distance = 2, preset = "cas12a", validate = FALSE)
build_index(name, genome, out_dir_index, distance = 2, preset = "Cas12a", validate = FALSE)
#'
# Now search some guides
guides_cas12 <- system.file("extdata/sample_genome", "guides_cas12a.txt", package = "crisprCHOPOFF")
# Quick preview in guides:
guide_candidates <- read.table(guides_cas12, col.names = "guides")
unique(nchar(unlist(guide_candidates))) # Unique lengths of guides
guide_hits <- search_index(guides_cas12, out_dir_index, distance = 2, validate = FALSE)
guide_hits_table <- read.table(guide_hits, sep = ",", header = TRUE)
guide_hits_table
library(crisprCHOPOFF)
guideSetTemplate
BiocManager::install("BioStyles")
BiocManager::install("BiocStyles")
BiocManager::install("BiocStyle")
GRanges("1", 1, "+")
GRanges("1", ranges = 1, "+")
?strand
library(crisprCHOPOFF)
# Load required libraries
{
library(crisprDesign)
library(BSgenome.Hsapiens.UCSC.hg38)
library(crisprBase)
library(Rbowtie)
library(crisprCHOPOFF)
}
# Run crisprVerse example (find guide candidates in human gene: IQSEC3)
{
data(SpCas9, package="crisprBase")
SpCas9
gr <- queryTxObject(txObject=grListExample,
featureType="cds",
queryColumn="gene_symbol",
queryValue="IQSEC3")[1] # exon 1
guideSet <- findSpacers(gr,
bsgenome=BSgenome.Hsapiens.UCSC.hg38,
crisprNuclease=SpCas9)
set.seed(10)
guideSet <- guideSet[sample(seq_along((guideSet)), 20)] # Sample a subset
guideSet <- addSequenceFeatures(guideSet) # Branching point for CHOPOFF/bowtie
}
# The offtarget detection using Bowtie:
{
# The offtarget detection using bowtie
fasta <- system.file(package="crisprDesign", "fasta/chr12.fa")
outdir <- tempdir()
Rbowtie::bowtie_build(fasta,
outdir=outdir,
force=TRUE,
prefix="chr12")
bowtie_index <- file.path(outdir, "chr12")
guideSetBowTie <- addSpacerAlignments(guideSet,
txObject=grListExample,
aligner_index=bowtie_index,
bsgenome=BSgenome.Hsapiens.UCSC.hg38,
n_mismatches=2)
# Off target score
guideSetBowTie <- addOffTargetScores(guideSetBowTie)
# On target score
guideSetBowTie <- addOnTargetScores(guideSetBowTie, methods="crisprater")
}
# Input parameters
name <- "human_chr12_CHOPOFF_CAS9"
out_dir_index <- file.path(tempdir(), name)
no_fasta_index <- !file.exists(paste0(fasta, ".fai"))
if (no_fasta_index) Rsamtools::indexFa(fasta)
build_index(name, fasta, out_dir_index, distance = 2, validate = FALSE)
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
GRanges(c("1", "1"), 1, "+")
devtools::load_all()
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
devtools::load_all()
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
devtools::load_all()
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
debug(addSpacerAlignmentsCHOPOFF)
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
b
alignments_grl
guides_hits_table_ordered$start
start(alignments_grl) <- guides_hits_table_ordered$start
start(alignments_grl)
guides_hits_table_ordered$start
alignments_grl
start(alignments_grl)
start(alignments_grl) <- 2
start(alignments_grl)
length(guides_hits_table_ordered$start)
length(start(alignments_grl))
start(alignments_grl) <- guides_hits_table_ordered$start
min(guides_hits_table_ordered$start)
devtools::load_all()
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
guideSetCHOPOFF
reverseComplement("GCT")
reverseComplement(DNAString("GCT"))
reverseComplement(DNAString("GCTCTGCTGGTTCTGCACGA"))
tail(DNAString("GCTCTGCTGGTTCTGCACGA"), 3)
library(crisprCHOPOFF)
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
name <- "human_chr12_CHOPOFF_CAS9"
out_dir_index <- file.path(tempdir(), name)
no_fasta_index <- !file.exists(paste0(fasta, ".fai"))
if (no_fasta_index) Rsamtools::indexFa(fasta)
build_index(name, fasta, out_dir_index, distance = 2, validate = FALSE)
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
devtools::load_all()
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
devtools::load_all()
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
guideSetCHOPOFF
debug(addSpacerAlignmentsCHOPOFF)
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
devtools::load_all()
debug(spacers_as_grl)
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
devtools::load_all()
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
alignments_grl <- spacers_as_grl(guide_file, overlap_file, guideSet)
alignments_grl2 <- spacers_as_grl(guide_file, overlap_file)
debug(spacers_as_grl)
alignments_grl2 <- spacers_as_grl(guide_file, overlap_file)
paste0("spacer_", seq(nrow(guide_hits_table)))
names(guideSet)
guideSetCHOPOFF
guide_hits_table
guide_hits_table[!duplicated(guide_hits_table$guide),]
devtools::load_all()
guideSetCHOPOFF2 <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
debug(spacers_as_grl)
alignments_grl <- spacers_as_grl(guide_file, overlap_file)
alignments_grl
alignments_grl
guideSet[1]
alignments_grl[1]
guideSetCHOPOFF2
guideSetCHOPOFF2
guideSetCHOPOFF
identical(guideSetCHOPOFF, guideSetCHOPOFF2)
library(crisprCHOPOFF)
rm(list=ls())
devtools::load_all()
name <- "CAS9"
genome <- system.file("extdata/sample_genome", "semirandom.fa", package = "crisprCHOPOFF")
## Note: a fasta index ".fai" file must exist in directory of genome.
# You can make it with:
#if (!file.exists(paste0(genome, ".fai"))) {
#Rsamtools::indexFa(genome)
#}
out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome")
build_index(name, genome, out_dir_index, distance = 2)
#'
# Now search some guides
guides <- system.file("extdata/sample_genome", "guides.txt", package = "crisprCHOPOFF")
# Quick preview in guides:
guide_candidates <- read.table(guides, col.names = "guides")
unique(nchar(unlist(guide_candidates))) # Unique lengths of guides
guide_hits <- search_index(guides, out_dir_index, distance = 2, validate = FALSE)
addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, validate = FALSE)
library(crisprCHOPOFF)
name <- "CAS9"
genome <- system.file("extdata/sample_genome", "semirandom.fa", package = "crisprCHOPOFF")
## Note: a fasta index ".fai" file must exist in directory of genome.
# You can make it with:
#if (!file.exists(paste0(genome, ".fai"))) {
#Rsamtools::indexFa(genome)
#}
out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome")
build_index(name, genome, out_dir_index, distance = 2)
#'
# Now search some guides
guides <- system.file("extdata/sample_genome", "guides.txt", package = "crisprCHOPOFF")
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, validate = FALSE)
devtools::load_all()
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, validate = FALSE)
devtools::load_all()
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, validate = FALSE)
devtools::load_all()
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, validate = FALSE)
devtools::load_all()
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, validate = FALSE)
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, validate = FALSE, crisprDesign_message = FALSE)
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, crisprDesign_message = FALSE)
guideSet
guideSet$alignments
reverseComplement(DNAStringSet(c("AAAAAA", "AAATTT")))
as.character(reverseComplement(DNAStringSet(c("AAAAAA", "AAATTT"))))
{
library(crisprDesign)
library(BSgenome.Hsapiens.UCSC.hg38)
library(crisprBase)
library(Rbowtie)
library(crisprCHOPOFF)
}
# Run crisprVerse example (find guide candidates in human gene: IQSEC3)
{
data(SpCas9, package="crisprBase")
SpCas9
gr <- queryTxObject(txObject=grListExample,
featureType="cds",
queryColumn="gene_symbol",
queryValue="IQSEC3")[1] # exon 1
guideSet <- findSpacers(gr,
bsgenome=BSgenome.Hsapiens.UCSC.hg38,
crisprNuclease=SpCas9)
set.seed(10)
guideSet <- guideSet[sample(seq_along((guideSet)), 20)] # Sample a subset
guideSet <- addSequenceFeatures(guideSet) # Branching point for CHOPOFF/bowtie
}
# The offtarget detection using Bowtie:
{
# The offtarget detection using bowtie
fasta <- system.file(package="crisprDesign", "fasta/chr12.fa")
outdir <- tempdir()
Rbowtie::bowtie_build(fasta,
outdir=outdir,
force=TRUE,
prefix="chr12")
bowtie_index <- file.path(outdir, "chr12")
guideSetBowTie <- addSpacerAlignments(guideSet,
txObject=grListExample,
aligner_index=bowtie_index,
bsgenome=BSgenome.Hsapiens.UCSC.hg38,
n_mismatches=2)
# Off target score
guideSetBowTie <- addOffTargetScores(guideSetBowTie)
# On target score
guideSetBowTie <- addOnTargetScores(guideSetBowTie, methods="crisprater")
}
guideSetBowTie
devtools::load_all()
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, crisprDesign_message = FALSE)
debug(addSpacerAlignmentsCHOPOFF)
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, crisprDesign_message = FALSE)
cbind(protospacer = DNAStringSet(unique_guides$guide),
pam = reverseComplement(tail(DNAStringSet(unique_guides$guide))),
pam_site = unique_guides$start)
reverseComplement(tail(DNAStringSet(unique_guides$guide)))
DNAStringSet(unique_guides$guide)
cbind(protospacer = DNAStringSet(unique_guides$guide),
pam = reverseComplement(tail(DNAStringSet(unique_guides$guide))),
pam_site = unique_guides$start)
DataFrame((protospacer = DNAStringSet(unique_guides$guide),
DataFrame(protospacer = DNAStringSet(unique_guides$guide),
pam = reverseComplement(tail(DNAStringSet(unique_guides$guide))),
pam_site = unique_guides$start)
length(reverseComplement(tail(DNAStringSet(unique_guides$guide))))
length(unique_guides$start)
DNAStringSet(unique_guides$guide)
length(DNAStringSet(unique_guides$guide))
reverseComplement(tail(DNAStringSet(unique_guides$guide)))
reverseComplement(tail(DNAStringSet(unique_guides$guide)))
reverseComplement(tail(DNAStringSet(unique_guides$guide), 3))
reverseComplement(ptail(DNAStringSet(unique_guides$guide), 3))
reverseComplement(phead(DNAStringSet(unique_guides$guide), 3))
?phead
?headp
?head
protospacers <- DNAStringSet(unique_guides$guide)
protospacers
subseq(protospacers, 1, 1)
subseq(protospacers, width(protospacers)-2, protospacers)
subseq(protospacers, width(protospacers)-2, width(protospacers))
protospacers
devtools::load_all()
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, crisprDesign_message = FALSE)
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, crisprDesign_message = FALSE, validate = FALSE)
debug(construct_guideSet_from_table)
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, crisprDesign_message = FALSE, validate = FALSE)
cbind(protospacer = protospacers,
pam = subseq(protospacers, width(protospacers)-2, width(protospacers)),
pam_site = unique_guides$start)
DataFrame(protospacer = protospacers,
pam = subseq(protospacers, width(protospacers)-2, width(protospacers)),
pam_site = unique_guides$start)
?DataFrame
devtools::load_all()
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, crisprDesign_message = FALSE, validate = FALSE)
guideSet
library(crisprCHOPOFF)
name <- "CAS9"
genome <- system.file("extdata/sample_genome", "semirandom.fa", package = "crisprCHOPOFF")
out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome")
build_index(name, genome, out_dir_index, distance = 2)
## Step by step run CAS9
guideSet$alignments
guideSet
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, crisprDesign_message = FALSE)
guideSet
debug(spacers_as_grl)
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, crisprDesign_message = FALSE)
alignments
matching
alignments_matched
guideSet
devtools::load_all()
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, crisprDesign_message = FALSE)
guideSet
guideSet$alignments
{
library(crisprDesign)
library(BSgenome.Hsapiens.UCSC.hg38)
library(crisprBase)
library(Rbowtie)
library(crisprCHOPOFF)
}
# Run crisprVerse example (find guide candidates in human gene: IQSEC3)
{
data(SpCas9, package="crisprBase")
SpCas9
gr <- queryTxObject(txObject=grListExample,
featureType="cds",
queryColumn="gene_symbol",
queryValue="IQSEC3")[1] # exon 1
guideSet <- findSpacers(gr,
bsgenome=BSgenome.Hsapiens.UCSC.hg38,
crisprNuclease=SpCas9)
guideSet
set.seed(10)
guideSet <- guideSet[sample(seq_along((guideSet)), 20)] # Sample a subset
spacers(guideSet)
protospacers(guideSet)
pams(guideSet)
head(pamSites(guideSet))
head(cutSites(guideSet))
guideSet <- addSequenceFeatures(guideSet) # Branching point for CHOPOFF
head(guideSet)
}
# The offtarget detection using CHOPOFF:
{
# Input parameters
name <- "human_chr12_CHOPOFF_CAS9"
out_dir_index <- file.path(tempdir(), name)
no_fasta_index <- !file.exists(paste0(fasta, ".fai"))
if (no_fasta_index) Rsamtools::indexFa(fasta)
build_index(name, fasta, out_dir_index, distance = 2, validate = FALSE)
guideSetCHOPOFF <- addSpacerAlignmentsCHOPOFF(guideSet, out_dir_index,
distance = 2, validate = FALSE)
# On target score (This is valid)
guideSetCHOPOFF <- addOnTargetScores(guideSetCHOPOFF, methods="crisprater")
}
guideSetCHOPOFF
gsCHOPPOFF_n0 <- guideSetCHOPOFF[guideSetCHOPOFF$n1 == 0 & guideSetCHOPOFF$n2 == 0]
CHOPOFF_gr <- unlist(gsCHOPPOFF_n0$alignments, use.names = FALSE)
bowtie_gr <-unlist(guideSetBowTie$alignments, use.names = FALSE)
identical(ranges(gsCHOPPOFF_n0), ranges(guideSetBowTie[names(gsCHOPPOFF_n0)]))
guideSetCHOPOFF
guideSetCHOPOFF["spacer_112"]
guideSetCHOPOFF[start(guideSetCHOPOFF) == 67396]
library(crisprCHOPOFF)
name <- "CAS9"
genome <- system.file("extdata/sample_genome", "semirandom.fa", package = "crisprCHOPOFF")
out_dir_index <- file.path(tempdir(), "CHOPOFF_sample_genome")
build_index(name, genome, out_dir_index, distance = 2)
#'
# Now search some guides
guides <- system.file("extdata/sample_genome", "guides.txt", package = "crisprCHOPOFF")
guideSet <- addSpacerAlignmentsCHOPOFF(guides, out_dir_index, distance = 2, crisprDesign_message = FALSE)
guideSet[start(guideSet) == 67396]
guideSet
guide_hits_table <- read.table(guide_hits, sep = ",", header = TRUE)
guide_hits_table
guide_hits_table[guide_hits_table$guide == "GAGCATCCACTGTGACGAAC",]
guideSet$alignments
guideSet$alignments[1:2] # Spacer 2 has 2 hits
library(crisprCHOPOFF)
library(crisprCHOPOFF)
?subseq
library(crisprCHOPOFF)
library(crisprCHOPOFF)
?`mcols<-`
library(crisprCHOPOFF)
library(crisprCHOPOFF)
tail(DNAString("ACCTAATTTTGGGGGGTC--GG"), 3)
