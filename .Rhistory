protospacers = DNAStringSet(guides_vector),
seqnames = seqnames,
targetOrigin = "customSequences",
strand = "+",
CrisprNuclease = SpCas9,
seqinfo = seqinfo,
pams = rep("NGG", length(guides_vector)),
pam_site = guide_hits_table$start)
guide_hits_table
GuideSet(ids = paste0("guide_", seq(length(guides_vector))),
protospacers = DNAStringSet(guides_vector),
seqnames = seqnames,
targetOrigin = "customSequences",
strand = guide_hits_table$strand,
CrisprNuclease = SpCas9,
seqinfo = seqinfo,
pams = rep("NGG", length(guides_vector)),
pam_site = guide_hits_table$start)
GuideSet(ids = paste0("guide_", seq(length(guides_vector))),
protospacers = DNAStringSet(guides_vector),
seqnames = seqnames,
targetOrigin = "customSequences",
strand = guide_hits_table$strand,
CrisprNuclease = SpCas9,
seqinfo = seqinfo,
pams = rep("NGG", length(guides_vector)),
pam_site = guide_hits_table$start)
debug(validityMethod)
debug(crisprDesign:::validityMethod)
?validityMethod
??validityMethod
names(guides_vector) <- paste0("guide_", seq(length(guides_vector)))
GuideSet(ids = paste0("guide_", seq(length(guides_vector))),
protospacers = DNAStringSet(guides_vector),
seqnames = seqnames,
targetOrigin = "customSequences",
strand = guide_hits_table$strand,
CrisprNuclease = SpCas9,
seqinfo = seqinfo,
pams = rep("NGG", length(guides_vector)),
pam_site = guide_hits_table$start)
GuideSet(ids = paste0("guide_", seq(length(guides_vector))),
protospacers = DNAStringSet(guides_vector),
seqnames = seqnames,
targetOrigin = "customSequences",
strand = guide_hits_table$strand,
CrisprNuclease = SpCas9,
seqinfo = seqinfo,
pams = rep("NGG", length(guides_vector)),
pam_site = guide_hits_table$start)
GuideSet(ids = paste0("guide_", seq(length(guides_vector))),
protospacers = DNAStringSet(guides_vector),
seqnames = seqnames,
targetOrigin = "customSequences",
strand = guide_hits_table$strand,
CrisprNuclease = SpCas9,
seqinfo = seqinfo,
pams = rep("NGG", length(guides_vector)),
pam_site = guide_hits_table$start, customSequences = "a")
gr
...
as.list(...)
eval("...")
eval(...)
eval(as.list("..."))
print(...)
eval(substitute(alist(...)))
list(...)
GuideSet(ids = paste0("guide_", seq(length(guides_vector))),
protospacers = DNAStringSet(guides_vector),
seqnames = seqnames,
targetOrigin = "customSequences",
strand = guide_hits_table$strand,
CrisprNuclease = SpCas9,
seqinfo = seqinfo,
pams = rep("NGG", length(guides_vector)),
pam_site = guide_hits_table$start, ... = "a")
list(...)
gr
GuideSet(ids = paste0("guide_", seq(length(guides_vector))),
protospacers = DNAStringSet(guides_vector),
customSequences = guides_vector,
seqnames = seqnames,
targetOrigin = "customSequences",
strand = guide_hits_table$strand,
CrisprNuclease = SpCas9,
seqinfo = seqinfo,
pams = rep("NGG", length(guides_vector)),
pam_site = guide_hits_table$start)
undebug(GuideSet)
guideSet_sample <-
GuideSet(ids = paste0("guide_", seq(length(guides_vector))),
protospacers = DNAStringSet(guides_vector),
customSequences = guides_vector,
seqnames = seqnames,
targetOrigin = "customSequences",
strand = guide_hits_table$strand,
CrisprNuclease = SpCas9,
seqinfo = seqinfo,
pams = rep("NGG", length(guides_vector)),
pam_site = guide_hits_table$start)
guide_hits <- search_index(guides_vector, out_dir_index, validate = FALSE, distance = 1)
guide_hits <- search_index(guideSet_sample, out_dir_index, validate = FALSE, distance = 1)
guide_hits_table <- read.table(guide_hits, sep = ",", header = TRUE)
expect_equal(sum(guide_hits_table$start), 3933045)
name <- "CAS12a"
build_index(name, genome, out_dir_index_cas12, validate = FALSE, distance = 2, preset = "Cas12a")
# Quick preview in guides:
guide_candidates <- read.table(guides, col.names = "guides")
unique(nchar(unlist(guide_candidates))) # Unique lengths of guides
guide_hits <- search_index(guides, out_dir_index_cas12, validate = FALSE, distance = 1)
knitr::opts_chunk$set(echo = TRUE)
# Load required libraries
library(crisprDesign)
library(BSgenome.Hsapiens.UCSC.hg38)
library(crisprBase)
library(Rbowtie)
library(crisprCHOPOFF)
# Run default example (find guide candidates in human gene: IQSEC3)
data(SpCas9, package="crisprBase")
SpCas9
gr <- queryTxObject(txObject=grListExample,
featureType="cds",
queryColumn="gene_symbol",
queryValue="IQSEC3")
gr <- gr[1] # exon 1
bsgenome <- BSgenome.Hsapiens.UCSC.hg38
guideSet <- findSpacers(gr,
bsgenome=bsgenome,
crisprNuclease=SpCas9)
guideSet <- findSpacers(gr,
bsgenome=bsgenome,
crisprNuclease=SpCas9)
guideSet
guideSet
set.seed(10)
set.seed(10)
guideSet <- guideSet[sample(seq_along((guideSet)),20)] # Sample a subset
spacers(guideSet)
protospacers(guideSet)
pams(guideSet)
head(pamSites(guideSet))
head(cutSites(guideSet))
guideSet <- addSequenceFeatures(guideSet)
guideSet <- addSequenceFeatures(guideSet)
head(guideSet)
guideSetCHOPOFF <- guideSet # Branching point for CHOPOFF
# The offtarget detection using bowtie
fasta <- system.file(package="crisprDesign", "fasta/chr12.fa")
outdir <- tempdir()
Rbowtie::bowtie_build(fasta,
outdir=outdir,
force=TRUE,
prefix="chr12")
bowtie_index <- file.path(outdir, "chr12")
guideSet <- addSpacerAlignments(guideSet,
txObject=grListExample,
aligner_index=bowtie_index,
bsgenome=bsgenome,
n_mismatches=2)
guideSetBowTie <- guideSet # To compare with CHOPOFF output
guideSet
guideSet
table(guideSet$score_cfd)
# On target score
guideSet <- addOnTargetScores(guideSet, methods="crisprater")
table(guideSet$score_crisprater)
# Final filter:
guideSetFilter <- guideSet[guideSetFilter$percentGC>=20]
guideSetFilter <- guideSetFilter[guideSetFilter$percentGC<=80]
guideSetFilter <- guideSetFilter[!guideSetFilter$polyT]
guideSetFilter[guideSetFilter$score_crisprater > 0.8] # Our final candidate
name <- "human_chr12_CHOPOFF_CAS9"
out_dir_index <- file.path(tempdir(), name)
if (!file.exists(paste0(fasta, ".fai"))) Rsamtools::indexFa(fasta)
build_index(name, fasta, out_dir_index, distance = 2, validate = FALSE)
guide_hits <- search_index(guideSetCHOPOFF, out_dir_index, distance = 2, validate = FALSE)
guide_hits_table <- read.table(guide_hits, sep = ",", header = TRUE)
library(data.table)
guide_hits_table <- as.data.table(guide_hits_table)
guide_hits_table[, alignments := paste0(chromosome, ":", start, ":", strand)]
alignments <- data.table::dcast(as.data.table(guide_hits_table), guide ~ distance)
colnames(alignments)[-1] <- paste0("n", colnames(alignments)[-1])
matching <- match(as.character(guideSetCHOPOFF$protospacer),  alignments$guide)
mcols(guideSetCHOPOFF) <- cbind(mcols(guideSetCHOPOFF), alignments[matching, -1], alignments = paste0(granges(guideSetCHOPOFF)))
# Now lets compare
guideSetBowTie
guideSetCHOPOFF
identical(guideSetBowTie$n0, guideSetCHOPOFF$n0)
identical(ranges(guideSetBowTie), ranges(guideSetCHOPOFF$n0))
ranges(guideSetBowTie)
identical(ranges(guideSetBowTie), ranges(guideSetCHOPOFF))
identical(guideSetBowTie$n0, guideSetCHOPOFF$n0)
table(mcols(guideSetBowTie)[,c("n0")])
table(mcols(guideSetCHOPOFF)[,c("n0")])
table(mcols(guideSetBowTie)[,c("n2")])
table(mcols(guideSetCHOPOFF)[,c("n2")])
table(mcols(guideSetCHOPOFF)[,c("n2")]) # <- 1 (1 distance hit), 2 (2 distance hits)
guideSetCHOPOFF
guideSet
guideSetBowTie[["alignments"]]
mcols(guideSetBowTie)[["alignments"]]
guideSetBowTie
guide_hits_table
matching
match(as.character(guideSetCHOPOFF$protospacer),  alignments$guide)
any(duplicated(alignments$guide))
alignments
guideSetCHOPOFF
guide_hits_table
alignments_matched <- alignments[matching, ]
# Now make the GuideSet [["alignments]] mcol needed for scoring
match(guide_hits_table$guide, alignments_matched$guide)
# Now make the GuideSet [["alignments]] mcol needed for scoring
match(alignments_matched$guide, guide_hits_table$guide)
# Now make the GuideSet [["alignments]] mcol needed for scoring
match(alignments_matched$guide, guide_hits_table$guide)
# Now make the GuideSet [["alignments]] mcol needed for scoring
match(guide_hits_table$guide, alignments_matched$guide)
order(match(guide_hits_table$guide, alignments_matched$guide))
# Now make the GuideSet [["alignments]] mcol needed for scoring
matched_dups <- match(guide_hits_table$guide, alignments_matched$guide)
ordering <- order(matched_dups)
alignments_grl <- guideSetCHOPOFF[ordering]
alignments_grl <- guideSetCHOPOFF[matched_dups[ordering]]
alignments_grl
# Now make the GuideSet [["alignments]] mcol needed for scoring
matched_dups_a <- match(alignments_matched$guide, guide_hits_table$guide)
matched_dups_g <- match(guide_hits_table$guide, alignments_matched$guide)
matched_dups_a
table(alignments_matched)
alignments_matched
alignments_matched
guideSetCHOPOFF
alignments_matched
table(alignments_matched)
table(as.factor(alignments_matched))
table(factor(alignments_matched))
table(factor(alignments_matched$guide))
# Now make the GuideSet [["alignments]] mcol needed for scoring
matched_dups_a <- match(alignments_matched$guide, guide_hits_table$guide)
matched_dups_g <- match(guide_hits_table$guide, alignments_matched$guide)
ordering <- order(matched_dups_g)
table(factor(alignments_matchedmatched_dups_a$guide))
matched_dups_a
matched_dups_g
alignments_grl <- guideSetCHOPOFF[matched_dups_g]
alignments_grl
alignments_grl[1:3]
guideSetCHOPOFF[1:2]
matched_dups_g
matched_dups_a
match(guide_hits_table$guide, alignments_matched[matched_dups_a,]$guide)
# Now make the GuideSet [["alignments]] mcol needed for scoring
matched_dups_a <- match(alignments_matched$guide, guide_hits_table$guide)
matched_dups_a
matched_dups_g <- match(guide_hits_table$guide, alignments_matched$guide)
matched_dups_g
ordering
guide_hits_table[ordering,]
guideSetCHOPOFF[1:2]
guides_hits_table_ordered <- guide_hits_table[ordering,]
table(guides_hits_table_ordered)
table(guides_hits_table_ordered$guide)
guides_hits_table_ordered[1:4]
nrow(guides_hits_table_ordered)
nrow(guides_hits_table)
nrow(guides_hits_table)
nrow(guide_hits_table)
matched_dups_a
guides_hits_table_ordered
any(duplicated(guides_hits_table_ordered$guide))
sapply(guides_hits_table_ordered$guide, function(x) sum(r==x))
sapply(guides_hits_table_ordered$guide, function(x) sum(guides_hits_table_ordered$guide==x))
guides_hits_table_ordered[, .N, by = guide]
N <- guides_hits_table_ordered[, .N, by = guide]$N
rep.int(seq(length(guideSetCHOPOFF)), times = N)
dups_total <- rep.int(seq(length(guideSetCHOPOFF)), times = N)
alignments_grl <- guideSetCHOPOFF[dups_total]
alignments_grl
guides_hits_table_ordered
# Now make the GuideSet [["alignments]] mcol needed for scoring
mcols(guideSet)[["alignments"]]
alignments_grl
mcols(alignments_grl)[c("protospacer", "pam", "pam_site", "n_mismatches")]
mcols(alignments_grl)[,c("protospacer", "pam", "pam_site", "n_mismatches")]
mcols(alignments_grl)[c("protospacer", "pam", "pam_site", "n_mismatches")]
mcols(alignments_grl)
colnames(mcols(alignments_grl))
cbind(spacer = guides_hits_table_ordered$alignment_guide,
mcols(alignments_grl)[c("protospacer", "pam", "pam_site")],
n_mismatches = guides_hits_table_ordered$distance,
canonical = TRUE)
cbind(spacer = guides_hits_table_ordered$alignment_guide,
mcols(alignments_grl)[c("protospacer", "pam", "pam_site")],
n_mismatches = guides_hits_table_ordered$distance,
canonical = TRUE,
mcols(alignments_grl)["cut_site"])
mcols(alignments_grl) <- cbind(spacer = guides_hits_table_ordered$alignment_guide,
mcols(alignments_grl)[c("protospacer", "pam", "pam_site")],
n_mismatches = guides_hits_table_ordered$distance,
canonical = TRUE,
mcols(alignments_grl)["cut_site"])
guideSetCHOPOFF <- guideSetTemplate
mcols(guideSetCHOPOFF)
alignments_grl
mcols(guideSetCHOPOFF)[["alignments"]]
mcols(guideSet)[["alignments"]]
mcols(guideSetCHOPOFF)[["alignments"]] <- alignments_grl
alignments_grl
alignments_grl <- split(alignments_grl, names(alignments_grl))
mcols(guideSetCHOPOFF)[["alignments"]] <- alignments_grl
guideSetCHOPOFF
mcols(guideSet)[["alignments"]]
guideSet
library(crisprDesign)
library(BSgenome.Hsapiens.UCSC.hg38)
library(crisprBase)
library(Rbowtie)
library(crisprCHOPOFF)
library(data.table)
# Run default example (find guide candidates in human gene: IQSEC3)
data(SpCas9, package="crisprBase")
SpCas9
gr <- queryTxObject(txObject=grListExample,
featureType="cds",
queryColumn="gene_symbol",
queryValue="IQSEC3")
gr <- gr[1] # exon 1
bsgenome <- BSgenome.Hsapiens.UCSC.hg38
guideSet <- findSpacers(gr,
bsgenome=bsgenome,
crisprNuclease=SpCas9)
guideSet
set.seed(10)
guideSet <- guideSet[sample(seq_along((guideSet)),20)] # Sample a subset
spacers(guideSet)
protospacers(guideSet)
pams(guideSet)
head(pamSites(guideSet))
head(cutSites(guideSet))
guideSet <- addSequenceFeatures(guideSet)
head(guideSet)
guideSetTemplate <- guideSet # Branching point for CHOPOFF
# The offtarget detection using bowtie
fasta <- system.file(package="crisprDesign", "fasta/chr12.fa")
outdir <- tempdir()
Rbowtie::bowtie_build(fasta,
outdir=outdir,
force=TRUE,
prefix="chr12")
bowtie_index <- file.path(outdir, "chr12")
guideSet <- addSpacerAlignments(guideSet,
txObject=grListExample,
aligner_index=bowtie_index,
bsgenome=bsgenome,
n_mismatches=2)
guideSetBowTie <- guideSet # To compare with CHOPOFF output
guideSet
# Off target score
guideSet <- addOffTargetScores(guideSet)
guideSet
table(guideSet$score_cfd)
# On target score
guideSet <- addOnTargetScores(guideSet, methods="crisprater")
head(guideSet)
table(guideSet$score_crisprater)
# Final filter:
guideSetFilter <- guideSet[guideSetFilter$percentGC>=20]
library(crisprDesign)
library(BSgenome.Hsapiens.UCSC.hg38)
library(crisprBase)
library(Rbowtie)
library(crisprCHOPOFF)
library(data.table)
# Run default example (find guide candidates in human gene: IQSEC3)
data(SpCas9, package="crisprBase")
SpCas9
gr <- queryTxObject(txObject=grListExample,
featureType="cds",
queryColumn="gene_symbol",
queryValue="IQSEC3")
gr <- gr[1] # exon 1
bsgenome <- BSgenome.Hsapiens.UCSC.hg38
guideSet <- findSpacers(gr,
bsgenome=bsgenome,
crisprNuclease=SpCas9)
guideSet
set.seed(10)
guideSet <- guideSet[sample(seq_along((guideSet)),20)] # Sample a subset
spacers(guideSet)
protospacers(guideSet)
pams(guideSet)
head(pamSites(guideSet))
head(cutSites(guideSet))
guideSet <- addSequenceFeatures(guideSet)
head(guideSet)
guideSetTemplate <- guideSet # Branching point for CHOPOFF
# The offtarget detection using bowtie
fasta <- system.file(package="crisprDesign", "fasta/chr12.fa")
outdir <- tempdir()
Rbowtie::bowtie_build(fasta,
outdir=outdir,
force=TRUE,
prefix="chr12")
bowtie_index <- file.path(outdir, "chr12")
guideSet <- addSpacerAlignments(guideSet,
txObject=grListExample,
aligner_index=bowtie_index,
bsgenome=bsgenome,
n_mismatches=2)
guideSetBowTie <- guideSet # To compare with CHOPOFF output
guideSet
# Off target score
guideSet <- addOffTargetScores(guideSet)
guideSet
table(guideSet$score_cfd)
# On target score
guideSet <- addOnTargetScores(guideSet, methods="crisprater")
head(guideSet)
table(guideSet$score_crisprater)
# Final filter:
guideSetFilter <- guideSet[guideSet$percentGC>=20]
guideSetFilter <- guideSetFilter[guideSetFilter$percentGC<=80]
guideSetFilter <- guideSetFilter[!guideSetFilter$polyT]
guideSetFilter[guideSetFilter$score_crisprater > 0.8] # Our final candidate
# The offtarget detection using CHOPOFF
name <- "human_chr12_CHOPOFF_CAS9"
out_dir_index <- file.path(tempdir(), name)
if (!file.exists(paste0(fasta, ".fai"))) Rsamtools::indexFa(fasta)
build_index(name, fasta, out_dir_index, distance = 2, validate = FALSE)
guideSetCHOPOFF <- guideSetTemplate
guide_hits <- search_index(guideSetCHOPOFF, out_dir_index, distance = 2, validate = FALSE)
# Read in CHOPOFF hits from guide search
guide_hits_table <- read.table(guide_hits, sep = ",", header = TRUE)
# Convert back to crisprVerse GuideSet object
guide_hits_table <- as.data.table(guide_hits_table)
guide_hits_table[, alignments := paste0(chromosome, ":", start, ":", strand)]
# Make mismatch scoring object
alignments <- data.table::dcast(as.data.table(guide_hits_table), guide ~ distance)
colnames(alignments)[-1] <- paste0("n", colnames(alignments)[-1])
matching <- match(as.character(guideSetCHOPOFF$protospacer),  alignments$guide)
alignments_matched <- alignments[matching, ]
mcols(guideSetCHOPOFF) <- cbind(mcols(guideSetCHOPOFF), alignments_matched[, -1])
# Now make the GuideSet [["alignments]] mcol needed for scoring
mcols(guideSet)[["alignments"]] # <- This is what we want to make
matched_dups_a <- match(alignments_matched$guide, guide_hits_table$guide)
matched_dups_g <- match(guide_hits_table$guide, alignments_matched$guide)
ordering <- order(matched_dups_g)
guides_hits_table_ordered <- guide_hits_table[ordering,]
N <- guides_hits_table_ordered[, .N, by = guide]$N
dups_total <- rep.int(seq(length(guideSetCHOPOFF)), times = N)
alignments_grl <- guideSetCHOPOFF[dups_total]
mcols(alignments_grl) <- cbind(spacer = guides_hits_table_ordered$alignment_guide,
mcols(alignments_grl)[c("protospacer", "pam", "pam_site")],
n_mismatches = guides_hits_table_ordered$distance,
canonical = TRUE,
mcols(alignments_grl)["cut_site"])
alignments_grl <- split(alignments_grl, names(alignments_grl))
mcols(guideSetCHOPOFF)[["alignments"]] <- alignments_grl
guideSetCHOPOFF
# Off target score
guideSetCHOPOFF <- addOffTargetScores(guideSetCHOPOFF)
guideSetCHOPOFF
guide_hits_table
alignments_grl <- guideSetCHOPOFF[dups_total]
alignments_grl
guideSetCHOPOFF <- guideSetTemplate
guideSetCHOPOFF <- guideSetTemplate
mcols(guideSetCHOPOFF) <- cbind(mcols(guideSetCHOPOFF), alignments_matched[, -1])
alignments_grl <- guideSetCHOPOFF[dups_total]
# We should have defined spacer as: guides_hits_table_ordered$alignment_guide
# But crisprVerse does not support this, so we use guide.
mcols(alignments_grl) <- cbind(spacer = guides_hits_table_ordered$guide,
mcols(alignments_grl)[c("protospacer", "pam", "pam_site")],
n_mismatches = guides_hits_table_ordered$distance,
canonical = TRUE,
mcols(alignments_grl)["cut_site"])
alignments_grl <- split(alignments_grl, names(alignments_grl))
mcols(guideSetCHOPOFF)[["alignments"]] <- alignments_grl
# Off target score
guideSetCHOPOFF <- addOffTargetScores(guideSetCHOPOFF)
guideSetCHOPOFF
table(guideSetCHOPOFF$score_cfd)
# On target score
guideSetCHOPOFF <- addOnTargetScores(guideSetCHOPOFF, methods="crisprater")
head(guideSetCHOPOFF)
table(guideSetCHOPOFF$score_crisprater)
guideSet
# Final filter:
guideSetCHOPOFFFilter <- guideSetCHOPOFF[guideSetCHOPOFF$percentGC>=20]
guideSetCHOPOFFFilter <- guideSetCHOPOFFFilter[guideSetCHOPOFFFilter$percentGC<=80]
guideSetCHOPOFFFilter <- guideSetCHOPOFFFilter[!guideSetCHOPOFFFilter$polyT]
guideSetCHOPOFFFilter[guideSetCHOPOFFFilter$score_crisprater > 0.8] # Our final candidate
identical(guideSetCHOPOFFFilter[guideSetCHOPOFFFilter$score_crisprater > 0.8], guideSetFilter[guideSetFilter$score_crisprater > 0.8])
guideSetFilter[guideSetFilter$score_crisprater > 0.8]
selected_bowtie <- guideSetFilter[guideSetFilter$score_crisprater > 0.8]
selected_bowtie # Our final candidate
# Now lets compare
identical(ranges(selected_CHOPOFF), ranges(selected_bowtie))
ranges(selected_CHOPOFF)
selected_CHOPOFF
selected_CHOPOFF <-  guideSetCHOPOFFFilter[guideSetCHOPOFFFilter$score_crisprater > 0.8]
selected_CHOPOFF # Our final candidate
# Now lets compare
identical(ranges(selected_CHOPOFF), ranges(selected_bowtie))
library(crisprCHOPOFF)
library(crisprCHOPOFF)
library(crisprCHOPOFF)
library(crisprCHOPOFF)
library(crisprCHOPOFF)
library(crisprCHOPOFF)
